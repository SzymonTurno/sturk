name: Pull request

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build-default-on-unix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Build sturk
      run: tools/picky.sh make sturk-default
    - uses: actions/upload-artifact@v4
      with:
        name: build-default-on-${{ matrix.platform }}-output
        path: build/

  check-default-on-unix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    needs: build-default-on-unix
    steps:
    - uses: actions/checkout@v4
    - name: Setup
      run: |
        sudo apt update
        sudo apt-get install valgrind
    - uses: actions/download-artifact@v4
      with:
        name: build-default-on-${{ matrix.platform }}-output
        path: build/
    - name: Clone Unity
      run: make unity-default
    - name: Build tests
      run: tools/picky.sh make all-default
    - name: Run tests
      run: tools/picky.sh make check-default
    - uses: actions/upload-artifact@v4
      with:
        name: check-default-on-${{ matrix.platform }}-output
        path: build/

  build-default-on-win32:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup
      run: python -m pip install pyyaml
    - name: Build sturk
      run: make sturk-default
    - uses: actions/upload-artifact@v4
      with:
        name: build-default-on-win32-output
        path: build/

  check-default-on-win32:
    runs-on: windows-latest
    needs: build-default-on-win32
    steps:
    - uses: actions/checkout@v4
    - name: Setup
      run: python -m pip install pyyaml
    - uses: actions/download-artifact@v4
      with:
        name: build-default-on-win32-output
        path: build/
    - name: Clone Unity
      run: make unity-default
    - name: Build tests
      run: make all-default
    - name: Run tests
      run: make check-default

  build-iso-on-unix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Build sturk
      run: tools/picky.sh make sturk-iso
    - uses: actions/upload-artifact@v4
      with:
        name: build-iso-on-${{ matrix.platform }}-output
        path: build-iso/

  check-iso-on-unix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    needs: build-iso-on-unix
    steps:
    - uses: actions/checkout@v4
    - name: Setup
      run: |
        sudo apt update
        sudo apt-get install valgrind
        sudo apt-get install lcov
    - uses: actions/download-artifact@v4
      with:
        name: build-iso-on-${{ matrix.platform }}-output
        path: build-iso/
    - name: Clone Unity
      run: make unity-iso
    - name: Build tests
      run: tools/picky.sh make all-iso
    - name: Run tests
      run: tools/picky.sh make check-iso
    - name: Checkout code
      run: tools/picky.sh make coverage-iso
    - uses: actions/upload-artifact@v4
      with:
        name: check-iso-on-${{ matrix.platform }}-output
        path: build-iso/

  coverage-iso-on-unix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    needs: check-iso-on-unix
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: check-iso-on-${{ matrix.platform }}-output
        path: build-iso/
    - name: Setup LCOV
      uses: hrishikesh-kadam/setup-lcov@v1
    - name: Report code coverage
      uses: zgosalvez/github-actions-report-lcov@v4
      with:
        coverage-files: build-iso/tests/reports.d/coverage.info
        minimum-coverage: 100

  build-iso-on-win32:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup
      run: python -m pip install pyyaml
    - name: Build sturk
      run: make sturk-iso
    - uses: actions/upload-artifact@v4
      with:
        name: build-iso-on-win32-output
        path: build-iso/

  check-iso-on-win32:
    runs-on: windows-latest
    needs: build-iso-on-win32
    steps:
    - uses: actions/checkout@v4
    - name: Setup
      run: python -m pip install pyyaml
    - uses: actions/download-artifact@v4
      with:
        name: build-iso-on-win32-output
        path: build-iso/
    - name: Clone Unity
      run: make unity-iso
    - name: Build tests
      run: make all-iso
    - name: Run tests
      run: make check-iso

  build-posix-on-unix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Build sturk
      run: tools/picky.sh make sturk-posix
    - uses: actions/upload-artifact@v4
      with:
        name: build-posix-on-${{ matrix.platform }}-output
        path: build-posix/

  check-posix-on-unix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    needs: build-posix-on-unix
    steps:
    - uses: actions/checkout@v4
    - name: Setup
      run: |
        sudo apt update
        sudo apt-get install valgrind
        sudo apt-get install lcov
    - name: Clone Unity
      run: make unity-posix
    - name: Build tests
      run: tools/picky.sh make all-posix
    - name: Run tests
      run: tools/picky.sh make check-posix
    - name: Checkout code
      run: tools/picky.sh make coverage-posix
    - uses: actions/upload-artifact@v4
      with:
        name: check-posix-on-${{ matrix.platform }}-output
        path: build-posix/

  coverage-posix-on-unix:
    runs-on: ubuntu-latest
    needs: check-posix-on-unix
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: check-posix-on-${{ matrix.platform }}-output
        path: build-posix/
    - name: Setup LCOV
      uses: hrishikesh-kadam/setup-lcov@v1
    - name: Report code coverage
      uses: zgosalvez/github-actions-report-lcov@v4
      with:
        coverage-files: build-posix/tests/reports.d/coverage.info
        minimum-coverage: 100

  clang-format-checking:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: RafikFarhad/clang-format-github-action@v3
      with:
        sources: "include/**/*.h,src/**/*.h,src/**/*.c,tests/**/*.h,\
          tests/**/*.c,samples/**/*.h, samples/**/*.c"
        style: file

  ready-for-merge:
    runs-on: ubuntu-latest
    needs: [
      check-default-on-unix,
      check-default-on-win32,
      coverage-iso-on-unix,
      check-iso-on-win32,
      coverage-posix-on-unix,
      clang-format-checking
    ]
    steps:
    - uses: actions/checkout@v4
    - name: Set env
      run: |
        echo "RELEASE_VERSION=v0.0.0" >> $GITHUB_ENV
        echo "PROJECT_NUMBER=$(echo $RELEASE_VERSION | sed 's/v//')" >> $GITHUB_ENV
    - name: Setup
      run: |
        sudo apt update
        sudo apt-get install doxygen
        sudo apt-get install graphviz
    - name: Generate docs
      run: |
        tools/prepdocs.pl
        tools/picky.sh make PROJECT_NUMBER=$PROJECT_NUMBER public
